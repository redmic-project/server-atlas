server.port=8097
server.servlet.context-path=/api
spring.mvc.servlet.path=/atlas/commands

microservice.view.path=/atlas/view

redmic.user-settings.enabled=true

documentation.MICROSERVICE_HOST=redmic.es${server.servlet.context-path}${spring.mvc.servlet.path}

spring.profiles.active=@spring.profiles.active@

info.microservice.name=@project.name@
info.microservice.description=@project.description@
info.microservice.version=@project.version@
info.microservice.outputEncoding=@project.reporting.outputEncoding@
info.microservice.documentation=${server.servlet.context-path}${spring.mvc.servlet.path}/documentation/atlas-command.html

management.endpoints.web.exposure.include=health, info, prometheus

#oauth
oauth.userid.endpoint=${oauth.server}/api/oauth/userid
oauth.check_token.endpoint=${oauth.server}/api/oauth/check_token
oauth.client.id=clientId
oauth.client.secret=secret

spring.devtools.add-properties=false

logging.level.root=info
logging.level.org.springframework=info
logging.level.es.redmic=info

spring.kafka.bootstrap-servers=${spring.kafka.bootstrap-servers}
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.listener.log-container-config=true
spring.kafka.listener.client-id=${spring.kafka.client-id}
spring.kafka.listener.idle-event-interval.seconds=60
spring.kafka.consumer.enable-auto-commit=true
spring.kafka.consumer.auto-commit-interval.seconds=1

spring.kafka.client-id=@project.name@
spring.kafka.consumer.group-id=@project.name@
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=io.confluent.kafka.serializers.KafkaAvroSerializer
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=io.confluent.kafka.serializers.KafkaAvroDeserializer

spring.kafka.consumer.max-poll-records=50

spring.kafka.consumer.heartbeat-interval.seconds=100
spring.kafka.consumer.properties.session.timeout.ms=300000

rest.eventsource.timeout.ms=300000
stream.windows.time.ms=2400000

spring.kafka.properties.specific.avro.reader=true
spring.kafka.properties.value.subject.name.strategy=io.confluent.kafka.serializers.subject.TopicRecordNameStrategy

spring.kafka.properties.schema.registry.url=${spring.kafka.properties.schema.registry.url}

spring.jackson.deserialization.fail-on-unknown-properties=true
spring.jackson.deserialization.wrap-exceptions=false
spring.jackson.serialization.write-dates-as-timestamps=false

#mapping
controller.mapping.THEME_INSPIRE=/themeinspire

controller.mapping.LAYER=/layer

controller.mapping.SETTINGS=${controller.mapping.LAYER}/settings

controller.mapping.CATEGORY=/category

controller.mapping.EDIT_SCHEMA=/_schema

controller.mapping.DISCOVER_LAYERS=/discover-layers

#Alert
broker.topic.alert=alert
alert.email=alerts@redmic.es

#-------- Topics --------------------

#topic del broker para enviar/recibir eventos de layer
broker.topic.layer=layer

#topic del broker para enviar/recibir eventos de theme inspire
broker.topic.theme-inspire=theme-inspire

#topic para enviar eventos de themeinspire modificados para postupdate
broker.topic.theme.inspire.updated=theme-inspire-updated

#topic del broker para enviar/recibir eventos de category
broker.topic.category=category

# user-settings
broker.topic.settings=user-settings

broker.state.store.config.dir=${broker.state.store.config.dir}
stream.application.id=${stream.application.id}

broker.state.store.layer.id=layerStore.${stream.application.id}
broker.stream.events.layer.id=layerStream.${stream.application.id}
broker.state.store.layer.dir=${broker.state.store.config.dir}

broker.state.store.themeinspire.id=themeInspireStore.${stream.application.id}
broker.stream.events.themeinspire.id=themeInspireStream.${stream.application.id}
broker.state.store.themeinspire.dir=${broker.state.store.config.dir}

broker.state.store.category.id=categoryStore.${stream.application.id}
broker.stream.events.category.id=categoryStream.${stream.application.id}
broker.state.store.category.dir=${broker.state.store.config.dir}

broker.state.store.settings.id=settingsStore.${stream.application.id}
broker.stream.events.settings.id=settingsStream.${stream.application.id}
broker.state.store.settings.dir=${broker.state.store.config.dir}

#JsonSchema
property.path.media_storage.LOCAL_PRIVATE_BASE_PATH=${property.path.media_storage.LOCAL_PRIVATE_BASE_PATH}
property.path.media_storage.JSONSCHEMA=${property.path.media_storage.LOCAL_PRIVATE_BASE_PATH}/temp/jsonschema

#Exclude from autoconfigure
spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration, org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration, org.springframework.boot.autoconfigure.aop.AopAutoConfiguration, org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration, org.springframework.boot.autoconfigure.cloud.CloudAutoConfiguration, org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration, org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration, org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration, org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration, org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration, org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration, org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration, org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration, org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration, org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration, org.springframework.boot.autoconfigure.data.ldap.LdapDataAutoConfiguration, org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration, org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration, org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration, org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration, org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration, org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration, org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration, org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration, org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration, org.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration, org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration, org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration, org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration, org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration, org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration, org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration, org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration, org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration, org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration, org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration, org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration, org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration, org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration, org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration, org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration, org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration, org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration, org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration, org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration, org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration, org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration, org.springframework.boot.autoconfigure.mobile.DeviceDelegatingViewResolverAutoConfiguration, org.springframework.boot.autoconfigure.mobile.DeviceResolverAutoConfiguration, org.springframework.boot.autoconfigure.mobile.SitePreferenceAutoConfiguration, org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration, org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration, org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration, org.springframework.boot.autoconfigure.reactor.ReactorAutoConfiguration, org.springframework.boot.autoconfigure.security.FallbackWebSecurityAutoConfiguration, org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration, org.springframework.boot.autoconfigure.session.SessionAutoConfiguration, org.springframework.boot.autoconfigure.social.FacebookAutoConfiguration, org.springframework.boot.autoconfigure.social.LinkedInAutoConfiguration, org.springframework.boot.autoconfigure.social.SocialWebAutoConfiguration, org.springframework.boot.autoconfigure.social.TwitterAutoConfiguration, org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration, org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration, org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration
